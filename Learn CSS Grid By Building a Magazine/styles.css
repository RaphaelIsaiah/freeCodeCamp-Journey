/* This first rule is used to normalize the CSS rules by targeting the following selectors. */
*,
::before,
::after {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}
html {
  font-size: 62.5%;
  /* This will set the default font size for the web page to 10px note: the browser default is 16px.)
  This will make it easier to work with rem units later, as 2rem would be 20px.*/
}
/* Recall that we had imported stylesheets for fonts in the index.html. These are the fonts used here in the font-family. */
body {
  font-family: "Baskervville", serif;
  color: linen;
  background-color: rgb(20, 30, 40);
}
h1 {
  font-family: "Anton", sans-serif;
}
h2,
h3,
h4,
h5,
h6 {
  font-family: "Raleway", sans-serif;
}
a {
  text-decoration: none;
  color: linen;
}
/* CSS Grid offers a two-dimensional grid-based layout, allowing you to center items horizontally and vertically while still retaining control to do things like overlap elements. */
main {
  display: grid;
  /* CSS Grid is similar to Flexbox in that it has a special property for both the parent and child elements. Here the content or children of the parent 'main' are set to have a three-column layout by adding grid-template-columns */
  grid-template-columns:
    minmax(2rem, 1fr) minmax(min-content, 94rem)
    minmax(2rem, 1fr);
  /* This will create three columns where the middle column is 94rem wide, and the first and last columns are both 1 fraction of the remaining space in the grid container. */
  /* The minmax function is used to make the columns responsive on any device. The function takes 2 arguments, the first is the minimum value and the second is the maximum value. These values could be a length, percentage, fr, or even a keyword like max-content. */
  row-gap: 3rem;
}

/* ----- First Section ---- */

/* The magazine will have 3 sections whose overall layout has been set already in the 'main' rule. Their placement can still be adjusted in the child rules.
  One option to use is the grid-column property, which is shorthand for grid-column-start and grid-column-end. The grid-column property tells the grid item which grid line to start and end at. */

/* For additional control over the layout of your content, you can have a CSS Grid within a CSS Grid. */
.heading {
  grid-column: 2 / 3;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  row-gap: 1.5rem;
  /* This will create 2 columns of equal width.
  The CSS repeat() function is used to repeat a value, rather than writing it out manually, and is helpful for grid layouts. */
}
.text {
  grid-column: 2 / 3;
  font-size: 1.8rem;
  letter-spacing: 0.6px;
  column-width: 25rem;
  text-align: justify;
  /* columns can be created without using Grid by using the column-width property. */
}
/* There may be times where you are unsure of how many columns your grid will have, but you want an element to stop at the last column. To do this, you can use -1 for the end column */
.hero {
  grid-column: 1 / -1;
  /* This will tell the element to span the full width of the grid. */
  position: relative;
}
img {
  width: 100%;
  object-fit: cover;
  /*The object-fit property tells the browser how to position the element within its container. In this case, cover will set the image to fill the container, cropping as needed to avoid changing the aspect ratio. */
}
.hero-title {
  text-align: center;
  color: orangered;
  font-size: 8rem;
}
.hero-subtitle {
  font-size: 2.4rem;
  color: orangered;
  text-align: center;
}
.author {
  font-size: 2rem;
  font-family: "Raleway", sans-serif;
}
.author-name a:hover {
  background-color: #306203;
}
.publish-date {
  color: rgba(255, 255, 255, 0.5);
}
.social-icons {
  display: grid;
  font-size: 3rem;
  grid-template-columns: repeat(5, 1fr);
  grid-auto-flow: column;
  /* The grid-auto-flow property takes either row or column as the first value, with an optional second value of dense */
  grid-auto-columns: 1fr;
  align-items: center;
}

/* ---- Second Section ----- */
.first-paragraph::first-letter {
  font-size: 6rem;
  color: orangered;
  float: left;
  margin-right: 1rem;
  /* The float and margin-right properties are added to realign the other text that shifted out of place after the font-size was increased. */
}
hr {
  margin: 1.5rem 0;
  border: 1px solid rgba(120, 120, 120, 0.6);
}
.quote {
  color: #00beef;
  font-size: 2.4rem;
  text-align: center;
  font-family: "Raleway", sans-serif;
}
.quote::before {
  content: '" ';
}
.quote::after {
  content: ' "';
}
.text-with-images {
  display: grid;
  grid-template-columns: 1fr 2fr;
  column-gap: 3rem;
  margin-bottom: 3rem;
}
.lists {
  list-style-type: none;
  margin-top: 2rem;
}
.lists li {
  margin-bottom: 1.5rem;
}
.list-title,
.list-subtitle {
  color: #00beef;
}
.image-wrapper {
  display: grid;
  grid-template-columns: 2fr 1fr;
  grid-template-rows: repeat(3, min-content);
  /* This will give our grid rows that adjust in height based on the content, but columns that remain a fixed width based on the container. */
  gap: 2rem;
  place-items: center;
  /* The place-items property can be used to set the align-items and justify-items values at the same time. The place-items property takes one or two values. If one value is provided, it is used for both the align-items and justify-items properties. If two values are provided, the first value is used for the align-items property and the second value is used for the justify-items property. */
}
.image-1,
.image-3 {
  grid-column: 1 / -1;
  /* This will allow the first and third images to span the full width of the grid. */
}

@media only screen and (max-width: 720px) {
  .image-wrapper {
    grid-template-columns: 1fr;
    /* This will collapse the three images into one column on smaller screens. */
  }
}
@media only screen and (max-width: 600px) {
  .text-with-images {
    grid-template-columns: 1fr;
  }
}
@media only screen and (max-width: 550px) {
  .hero-title {
    font-size: 6rem;
  }
  .hero-subtitle,
  .author,
  .quote,
  .list-title {
    font-size: 1.8rem;
  }
  .social-icons {
    font-size: 2rem;
  }
  .text {
    font-size: 1.6rem;
  }
}
@media only screen and (max-width: 420px) {
  .hero-title {
    font-size: 4.5rem;
  }
}
